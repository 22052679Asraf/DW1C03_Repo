pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from Git repository'
                checkout scm
            }
        }

        stage('S1 5145881P') {
            steps {
                echo 'Stage1_5145881P : Release Environment Preparation Completed'
                
            }
        }


         stage('S2 5145881P') {
            steps {
                echo 'Stage2_5145881P : Release Container WebApp_5145881P Created Completed'

            }
        }

        stage('S3 5145881P') {
            parallel {
                stage('S3 API TEST') {
                    steps {
                        echo 'Stage3_5145881P: API Test Completed'
                    }
                }
                stage('S3 SCAN TEST') {
                    steps {
                        echo 'Stage3_5145881P: Scan Test Completed'
                    }
                }
            }
        }

         stage('Stage 4') {
            steps {
                script {
                    def userInput = input(message: 'Do you want to proceed?', ok: 'Proceed', parameters: [booleanParam(defaultValue: true, description: 'Proceed?', name: 'PROCEED')])
                    
                    if (!userInput.PROCEED) {
                        error('Pipeline aborted by user')
                    }
                }
            }
        }

        stage('Stage 5') {
            steps {
                script {
                    echo 'Executing Stage 5'

                    // Add logic based on the result of Stage 4
                    if (currentBuild.resultIsBetterOrEqualTo('ABORTED')) {
                        echo 'Pipeline was aborted in Stage 4'
                    } else {
                        echo 'Pipeline successfully completed'
                    }
                }
            }
        }
    }
}
