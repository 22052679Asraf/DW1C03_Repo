pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from Git repository'
                checkout scm
            }
        }

        stage('S1 5145881P') {
            steps {
                echo 'Stage1_5145881P : Release Environment Preparation Completed'
                
            }
        }


         stage('S2 5145881P') {
            steps {
                echo 'Stage2_5145881P : Release Container WebApp_5145881P Created Completed'

            }
        }

        stage('S3 5145881P') {
            parallel {
                stage('S3 API TEST') {
                    steps {
                        echo 'Stage3_5145881P: API Test Completed'
                    }
                }
                stage('S3 SCAN TEST') {
                    steps {
                        echo 'Stage3_5145881P: Scan Test Completed'
                    }
                }
            }
        }

         stage('S4 5145881P') {
            steps {
                script {
                    def userInput = input(
                        id: 'userInput',
                        message: '5145881P, proceed to release the work to next phase?',
                        parameters: [
                            choice(choices: 'Proceed\nAbort', description: 'Select an option:', name: 'ACTION')
                        ]
                    )

                    if (userInput.ACTION == 'Abort') {
                        error('Pipeline aborted by user.')
                    }
                }
            }
        }

        stage('S5 5145881P') {
            steps {
                script {
                    echo 'Executing Stage 5...'

                    if (currentBuild.resultIsBetterOrEqualTo('ABORTED')) {
                        echo 'Stage5_5145881P : Work Release â€“ Proceeds to Next Phase'
                    } else {
                        echo 'Stage5_5145881P : Work Release - Stops'
                    }
                }
            }
        }
    }
}
